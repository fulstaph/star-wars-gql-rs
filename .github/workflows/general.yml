name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CI: 1

jobs:
  prepare:
    name: Build & cache dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: wookiepedia-gql-rs
          path: |
            ./target/debug/wookiepedia-gql-rs

  fmt:
    name: Formatting
    needs:
      - prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - name: Run format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          toolchain: stable
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          args: -- -D warnings
          token: ${{ secrets.GITHUB_TOKEN }

  test:
    name: Test
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  build:
    needs: [fmt, clippy, test]
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Run build
        uses: actions-rs/cargo@v1
        with:
          command: build

  docker-build:
    needs: build
    name: Docker Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            fulstaph/star-wars-gql-rs
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          file: ./build/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
